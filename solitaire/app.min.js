const COLORS = {
    GOLD: '#E6D39E',
    BLACK: '#141414',
    RED: '#FF0000',
    DARK_BLACK: '#000000',
    WHITE: '#FFFFFF',
    GRADIENT_START: '#141414',
    GRADIENT_END: '#332B1A'
};
const SUITS = ['hearts', 'diamonds', 'clubs', 'spades'];
const RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
const SUIT_SYMBOLS = { hearts: '♥', diamonds: '♦', clubs: '♣', spades: '♠' };
let canvas, ctx;
let cardWidth = 80, cardHeight = 120;
let scale = 1;
let deck = [];
let tableau = Array(7).fill().map(() => []);
let foundations = Array(4).fill().map(() => []);
let stock = [];
let waste = [];
let selectedCards = null;
let dragOffset = {x: 0, y: 0};
let moves = [];
let score = 0;
let drawMode = 1;
let timed = false;
let startTime = 0;
let hintsEnabled = true;
let autoComplete = false;
let wins = 0, losses = 0, streak = 0;
let rank = 'Bronze Chip';
let reducedMotion = false;
let showTutorial = !localStorage.getItem('tutorialSeen');
let showSettings = false;

function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j] = [array[j], array[i]];
    }
}

function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        const r = Math.random() * 16 | 0;
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}

function init() {
    try {
        canvas = document.getElementById('gameCanvas');
        if (!canvas) throw new Error('Canvas element not found');
        ctx = canvas.getContext('2d');
        if (!ctx) throw new Error('Failed to get 2D context');
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        canvas.addEventListener('mousedown', handleMouseDown);
        canvas.addEventListener('mousemove', handleMouseMove);
        canvas.addEventListener('mouseup', handleMouseUp);
        canvas.addEventListener('touchstart', handleTouchStart, { passive: false });
        canvas.addEventListener('touchmove', handleTouchMove, { passive: false });
        canvas.addEventListener('touchend', handleTouchEnd, { passive: false });
        loadGameState();
        renderBoard();
        gameLoop();
        if (showTutorial) {
            showTutorialModal();
        }
    } catch (e) {
        console.error(e);
    }
}

function resizeCanvas() {
    const aspectRatio = 16 / 9;
    let newWidth = window.innerWidth;
    let newHeight = window.innerHeight;
    if (newWidth / newHeight > aspectRatio) {
        newWidth = newHeight * aspectRatio;
    } else {
        newHeight = newWidth / aspectRatio;
    }
    scale = newWidth / 800;
    canvas.width = newWidth;
    canvas.height = newHeight;
    cardWidth = 80 * scale;
    cardHeight = 120 * scale;
    renderBoard();
}

function renderBoard() {
    ctx.fillStyle = COLORS.GRADIENT_START;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    drawStock();
    drawWaste();
    drawFoundations();
    drawTableau();
    drawScore();
    drawHintsButton();
    drawUndoButton();
    drawNewGameButton();
    drawSettingsButton();
    if (selectedCards) {
        drawSelectedCards();
    }
    if (showSettings) {
        drawSettingsModal();
    }
    if (showTutorial) {
        drawTutorialModal();
    }
}

function drawCard(card, x, y, width, height, faceUp) {
    ctx.save();
    ctx.translate(x, y);
    ctx.fillStyle = COLORS.WHITE;
    ctx.fillRect(0, 0, width, height);
    ctx.strokeStyle = COLORS.BLACK;
    ctx.strokeRect(0, 0, width, height);
    if (faceUp) {
        ctx.fillStyle = card.color === 'red' ? COLORS.RED : COLORS.BLACK;
        ctx.font = `${height / 5}px Arial`;
        ctx.fillText(card.rank, 5, height / 5);
        ctx.fillText(SUIT_SYMBOLS[card.suit], 5, height / 2);
    } else {
        ctx.fillStyle = COLORS.RED;
        ctx.fillRect(5, 5, width - 10, height - 10);
    }
    ctx.restore();
}

function drawStock() {
    ctx.save();
    ctx.translate(20 * scale, 20 * scale);
    ctx.fillStyle = COLORS.DARK_BLACK;
    ctx.fillRect(0, 0, cardWidth, cardHeight);
    ctx.strokeStyle = COLORS.GOLD;
    ctx.strokeRect(0, 0, cardWidth, cardHeight);
    ctx.restore();
}

function drawWaste() {
    if (waste.length > 0) {
        drawCard(waste[waste.length - 1], 120 * scale, 20 * scale, cardWidth, cardHeight, true);
    }
}

function drawFoundations() {
    for (let i = 0; i < 4; i++) {
        ctx.save();
        ctx.translate((300 + i * 100) * scale, 20 * scale);
        ctx.fillStyle = COLORS.DARK_BLACK;
        ctx.fillRect(0, 0, cardWidth, cardHeight);
        ctx.strokeStyle = COLORS.GOLD;
        ctx.strokeRect(0, 0, cardWidth, cardHeight);
        if (foundations[i].length > 0) {
            drawCard(foundations[i][foundations[i].length - 1], 0, 0, cardWidth, cardHeight, true);
        }
        ctx.restore();
    }
}

function drawTableau() {
    for (let i = 0; i < 7; i++) {
        for (let j = 0; j < tableau[i].length; j++) {
            drawCard(tableau[i][j], (20 + i * 100) * scale, (150 + j * 20) * scale, cardWidth, cardHeight, tableau[i][j].faceUp);
        }
    }
}

function drawScore() {
    ctx.fillStyle = COLORS.GOLD;
    ctx.font = `${20 * scale}px Arial`;
    ctx.fillText(`Score: ${score}`, 20 * scale, 160 * scale);
}

function drawHintsButton() {
    ctx.fillStyle = COLORS.GOLD;
    ctx.fillRect(650 * scale, 20 * scale, 100 * scale, 40 * scale);
    ctx.fillStyle = COLORS.BLACK;
    ctx.font = `${20 * scale}px Arial`;
    ctx.fillText('Hint', 670 * scale, 45 * scale);
}

function drawUndoButton() {
    ctx.fillStyle = COLORS.GOLD;
    ctx.fillRect(650 * scale, 70 * scale, 100 * scale, 40 * scale);
    ctx.fillStyle = COLORS.BLACK;
    ctx.font = `${20 * scale}px Arial`;
    ctx.fillText('Undo', 670 * scale, 95 * scale);
}

function drawNewGameButton() {
    ctx.fillStyle = COLORS.GOLD;
    ctx.fillRect(650 * scale, 120 * scale, 100 * scale, 40 * scale);
    ctx.fillStyle = COLORS.BLACK;
    ctx.font = `${20 * scale}px Arial`;
    ctx.fillText('New Game', 660 * scale, 145 * scale);
}

function drawSettingsButton() {
    ctx.fillStyle = COLORS.GOLD;
    ctx.fillRect(650 * scale, 170 * scale, 100 * scale, 40 * scale);
    ctx.fillStyle = COLORS.BLACK;
    ctx.font = `${20 * scale}px Arial`;
    ctx.fillText('Settings', 660 * scale, 195 * scale);
}

function drawSelectedCards() {
    const {cards, pos} = selectedCards;
    for (let i = 0; i < cards.length; i++) {
        drawCard(cards[i], pos.x + dragOffset.x, pos.y + dragOffset.y + i * 20 * scale, cardWidth, cardHeight, true);
    }
}

function drawSettingsModal() {
    ctx.fillStyle = COLORS.BLACK;
    ctx.fillRect(200 * scale, 100 * scale, 400 * scale, 400 * scale);
    ctx.fillStyle = COLORS.GOLD;
    ctx.font = `${30 * scale}px Arial`;
    ctx.fillText('Settings', 300 * scale, 140 * scale);
    // Add settings options here
}

function drawTutorialModal() {
    ctx.fillStyle = COLORS.BLACK;
    ctx.fillRect(200 * scale, 100 * scale, 400 * scale, 400 * scale);
    ctx.fillStyle = COLORS.GOLD;
    ctx.font = `${30 * scale}px Arial`;
    ctx.fillText('Tutorial', 300 * scale, 140 * scale);
    // Add tutorial text here
}

function handleMouseDown(e) {
    const rect = canvas.getBoundingClientRect();
    const pos = {
        x: (e.clientX - rect.left) / scale,
        y: (e.clientY - rect.top) / scale
    };
    if (isInBounds(pos, 20, 20, cardWidth, cardHeight)) {
        drawFromStock();
        return;
    }
    if (isInBounds(pos, 120, 20, cardWidth, cardHeight) && waste.length > 0) {
        selectedCards = {pileType: 'waste', pileIndex: 0, cardIndex: waste.length - 1, cards: [waste[waste.length - 1]], pos};
        dragOffset = {x: pos.x - 120, y: pos.y - 20};
        renderBoard();
        return;
    }
    for (let i = 0; i < 7; i++) {
        const pile = tableau[i];
        for (let j = 0; j < pile.length; j++) {
            if (pile[j].faceUp && isInBounds(pos, 20 + i * 100, 150 + j * 20, cardWidth, cardHeight)) {
                selectedCards = {pileType: 'tableau', pileIndex: i, cardIndex: j, cards: pile.slice(j), pos};
                dragOffset = {x: pos.x - (20 + i * 100), y: pos.y - (150 + j * 20)};
                renderBoard();
                return;
            }
        }
    }
    if (isInBounds(pos, 650, 20, 100, 40)) {
        hint();
        return;
    }
    if (isInBounds(pos, 650, 70, 100, 40)) {
        undo();
        return;
    }
    if (isInBounds(pos, 650, 120, 100, 40)) {
        newGame();
        return;
    }
    if (isInBounds(pos, 650, 170, 100, 40)) {
        showSettings = true;
        renderBoard();
        return;
    }
}

function handleMouseMove(e) {
    const rect = canvas.getBoundingRect();
    const pos = {
        x: (e.clientX - rect.left) / scale,
        y: (e.clientY - rect.top) / scale
    };
    if (selectedCards) {
        selectedCards.pos = pos;
        renderBoard();
    }
}

function handleMouseUp(e) {
    if (selectedCards) {
        const rect = canvas.getBoundingRect();
        const pos = {
            x: (e.clientX - rect.left) / scale,
            y: (e.clientY - rect.top) / scale
        };
        moveSelectedCards(pos);
        selectedCards = null;
        renderBoard();
    }
}

function handleTouchStart(e) {
    e.preventDefault();
    const touch = e.touches[0];
    const rect = canvas.getBoundingRect();
    const pos = {
        x: (touch.clientX - rect.left) / scale,
        y: (touch.clientY - rect.top) / scale
    };
    handleMouseDown({clientX: touch.clientX, clientY: touch.clientY});
}

function handleTouchMove(e) {
    e.preventDefault();
    const touch = e.touches[0];
    const rect = canvas.getBoundingRect();
    const pos = {
        x: (touch.clientX - rect.left) / scale,
        y: (touch.clientY - rect.top) / scale
    };
    handleMouseMove({clientX: touch.clientX, clientY: touch.clientY});
}

function handleTouchEnd(e) {
    e.preventDefault();
    handleMouseUp(e);
}

function isInBounds(pos, x, y, w, h) {
    return pos.x > x && pos.x < x + w && pos.y > y && pos.y < y + h;
}

function drawFromStock() {
    if (stock.length > 0) {
        const card = stock.pop();
        card.faceUp = true;
        waste.push(card);
        score += 5;
        moves.push({type: 'draw'});
    } else if (waste.length > 0) {
        stock = waste.reverse();
        waste = [];
        score -= 100;
        moves.push({type: 'recycle'});
    }
    renderBoard();
}

function moveSelectedCards(pos) {
    const {pileType, pileIndex, cardIndex, cards} = selectedCards;
    for (let i = 0; i < 7; i++) {
        const pile = tableau[i];
        const targetY = 150 + pile.length * 20;
        if (isInBounds(pos, 20 + i * 100, targetY, cardWidth, cardHeight)) {
            if (canMoveToTableau(cards[0], pile[pile.length - 1])) {
                moves.push({type: 'move', fromType: pileType, fromIndex: pileIndex, fromCardIndex: cardIndex, toType: 'tableau', toIndex: i, cards});
                if (pileType === 'tableau') {
                    tableau[pileIndex].splice(cardIndex, cards.length);
                    tableau[i].push(...cards);
                    score += 5 * cards.length;
                } else if (pileType === 'waste') {
                    waste.pop();
                    tableau[i].push(cards[0]);
                    score += 5;
                } else if (pileType == 'foundation') {
                    foundations[pileIndex].pop();
                    tableau[i].push(cards[0]);
                    score -= 10;
                }
                checkAutoComplete();
                renderBoard();
                return;
            }
        }
    }
    for (let i = 0; i < 4; i++) {
        const pile = foundations[i];
        if (isInBounds(pos, 300 + i * 100, 20, cardWidth, cardHeight)) {
            if (cards.length === 1 && canMoveToFoundation(cards[0], pile[pile.length - 1], i)) {
                moves.push({type: 'move', fromType: pileType, fromIndex: pileIndex, fromCardIndex: cardIndex, toType: 'foundation', toIndex: i, cards});
                if (pileType === 'tableau') {
                    tableau[pileIndex].pop();
                    foundations[i].push(cards[0]);
                    score += 10;
                } else if (pileType === 'waste') {
                    waste.pop();
                    foundations[i].push(cards[0]);
                    score += 10;
                } else if (pileType === 'foundation') {
                    foundations[pileIndex].pop();
                    foundations[i].push(cards[0]);
                    score -= 10;
                }
                checkAutoComplete();
                renderBoard();
                return;
            }
        }
    }
    // Return to original position
    renderBoard();
}

function canMoveToTableau(card, target) {
    if (!target) return true;
    return card.color !== target.color && RANKS.indexOf(card.rank) === RANKS.indexOf(target.rank) - 1;
}

function canMoveToFoundation(card, target, foundationIndex) {
    const foundationSuit = SUITS[foundationIndex];
    if (card.suit !== foundationSuit) return false;
    if (!target) return card.rank === 'A';
    return RANKS.indexOf(card.rank) === RANKS.indexOf(target.rank) + 1;
}

function checkWin() {
    return foundations.every(pile => pile.length === 13);
}

function checkAutoComplete() {
    if (autoComplete) {
        // Implement auto complete logic
    }
}

function hint() {
    if (hintsEnabled) {
        // Implement hint logic
    }
}

function undo() {
    if (moves.length > 0) {
        const move = moves.pop();
        // Implement undo logic
        renderBoard();
    }
}

function newGame() {
    deck = [];
    for (let suit of SUITS) {
        for (let rank of RANKS) {
            deck.push({suit, rank, faceUp: false, color: (suit === 'hearts' || suit === 'diamonds') ? 'red' : 'black'});
        }
    }
    shuffle(deck);
    tableau = Array(7).fill().map(() => []);
    for (let i = 0; i < 7; i++) {
        for (let j = 0; j <= i; j++) {
            const card = deck.pop();
            card.faceUp = j === i;
            tableau[i].push(card);
        }
    }
    stock = deck;
    waste = [];
    foundations = Array(4).fill().map(() => []);
    score = 0;
    moves = [];
    renderBoard();
}

init();
